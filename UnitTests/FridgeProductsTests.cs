using ServerFridge.Models;
using System.ComponentModel.DataAnnotations;
using Xunit;
using System.Linq;

namespace UnitTests
{

    public class FridgeProductsTests
    {
        [Theory]
        [InlineData(0, false)] 
        [InlineData(1, true)]
        [InlineData(10, true)]
        [InlineData(-1, false)] 
        public void Quantity_ValidationTests(int quantity, bool isValid)
        { 
            var fridgeProduct = new FridgeProducts
            {
                ProductId = Guid.NewGuid(),
                FridgeId = Guid.NewGuid(),
                Quantity = quantity
            };

            var context = new ValidationContext(fridgeProduct);
            var results = new List<ValidationResult>();
            var actualIsValid = Validator.TryValidateObject(fridgeProduct, context, results, true);

      
            Assert.Equal(isValid, actualIsValid);

            if (!isValid)
            {
    
                Assert.True(results.Any(r => r.MemberNames.Contains("Quantity")));
            }
        }

        [Fact]
        public void ForeignKeys_CannotBeEmpty()
        {

            var fridgeProduct = new FridgeProducts
            {
                ProductId = Guid.Empty,
                FridgeId = Guid.Empty,
                Quantity = 1
            };

            var context = new ValidationContext(fridgeProduct);
            var results = new List<ValidationResult>();
            var isValid = Validator.TryValidateObject(fridgeProduct, context, results, true);

            Assert.False(isValid);


            Assert.Contains(results,r => r.MemberNames.Contains("ProductId"));

            Assert.Contains(results,r => r.MemberNames.Contains("FridgeId"));
        }

        [Fact]
        public void NavigationProperties_AreNullByDefault()
        {
        
            var fridgeProduct = new FridgeProducts();

       
            Assert.Null(fridgeProduct.Products);
            Assert.Null(fridgeProduct.Fridge);
        }

        [Fact]
        public void Id_IsAutoGeneratedAndUnique()
        {
         
            var item1 = new FridgeProducts();
            var item2 = new FridgeProducts();

        
            Assert.NotEqual(Guid.Empty, item1.Id);
            Assert.NotEqual(Guid.Empty, item2.Id);
            Assert.NotEqual(item1.Id, item2.Id);
        }

        [Fact]
        public void ValidObject_PassesValidation()
        {
       
            var fridgeProduct = new FridgeProducts
            {
                ProductId = Guid.NewGuid(),
                FridgeId = Guid.NewGuid(),
                Quantity = 5
            };

  
            var context = new ValidationContext(fridgeProduct);
            var results = new List<ValidationResult>();
            var isValid = Validator.TryValidateObject(fridgeProduct, context, results, true);


            Assert.True(isValid);
            Assert.Empty(results);
        }
    }
}
