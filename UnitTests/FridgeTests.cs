using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using ServerFridge.Models;
using Xunit;

namespace UnitTests
{
    public class FridgeTests
    {
        [Theory]
        [InlineData(null, false)] 
        [InlineData("", false)] 
        [InlineData("A", true)] 
        [InlineData("Valid Fridge Name", true)] 
        [InlineData("This is a very long fridge name that exceeds the maximum allowed length of 60 characters", false)] // Too long
        public void Name_ValidationTests(string name, bool isValid)
        {
           
            var fridge = new Fridge
            {
                Name = name,
                OwnerName = "Sasha Bone",
                ModelId = Guid.NewGuid()
            };

            
            var results = ValidateModel(fridge);


            Assert.Equal(isValid, !results.Any());

            if (!isValid)
            {
                Assert.Contains("Name", GetErrorPropertyNames(results));
            }
        }

        [Theory]
        [InlineData(null, true)] 
        [InlineData("", true)] 
        [InlineData("Sasha Bone", true)] 
        [InlineData("This is a very long owner name that exceeds the maximum allowed length of 100 characters", false)] // Too long
        public void OwnerName_ValidationTests(string ownerName, bool isValid)
        {
         
            var fridge = new Fridge
            {
                Name = "Valid Fridge",
                OwnerName = ownerName,
                ModelId = Guid.NewGuid()
            };

      
            var results = ValidateModel(fridge);

         
            Assert.Equal(isValid, !results.Any());

            if (!isValid)
            {
                Assert.Contains("OwnerName", GetErrorPropertyNames(results));
            }
        }

        [Fact]
        public void ModelId_CannotBeEmpty()
        {
           
            var fridge = new Fridge
            {
                Name = "Valid Fridge",
                OwnerName = "Sasha Bone",
                ModelId = Guid.Empty
            };

           
            var results = ValidateModel(fridge);

          
            Assert.NotEmpty(results);
            Assert.Contains("ModelId", GetErrorPropertyNames(results));
        }

        [Fact]
        public void NavigationProperty_IsNullByDefault()
        {
        
            var fridge = new Fridge();

         
            Assert.Null(fridge.FridgeModel);
        }

        [Fact]
        public void Id_IsAutoGeneratedAndUnique()
        {
          
            var fridge1 = new Fridge();
            var fridge2 = new Fridge();

         
            Assert.NotEqual(Guid.Empty, fridge1.Id);
            Assert.NotEqual(Guid.Empty, fridge2.Id);
            Assert.NotEqual(fridge1.Id, fridge2.Id);
        }

        [Fact]
        public void ValidObject_PassesValidation()
        {
       
            var fridge = new Fridge
            {
                Name = "Valid Fridge",
                OwnerName = "Sasha Bone",
                ModelId = Guid.NewGuid()
            };

            var results = ValidateModel(fridge);

    
            Assert.Empty(results);
        }


        private List<ValidationResult> ValidateModel(object model)
        {
            var results = new List<ValidationResult>();
            var context = new ValidationContext(model, null, null);
            Validator.TryValidateObject(model, context, results, true);
            return results;
        }

        private List<string> GetErrorPropertyNames(List<ValidationResult> errors)
        {
            return errors
                .SelectMany(e => e.MemberNames)
                .Distinct()
                .ToList();
        }
    }
}